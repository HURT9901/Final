@page "/sugerencias"
@using PaginaCursos.Shared.Entities
@using PaginaCursos.WEB.Repositories
@using PaginaCursos.WEB.Shared
@inject IRepository repository
@inject SweetAlertService SweetAlertService
@inject NavigationManager navigationManager


<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Sugerencias
            <a class="btn btn-primary btn-sm float-end" href="/sugerencias/create"><i class="bi bi-plus-circle" />Nuevo Sugerencia</a>

        </span>
    </div>

    <div class="card-body">
        <GenericList MyList="Sugerencias">
            <Body>
                <div class="align-items-center">
                </div>


                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <b>Id-Sugerencia</b>
                            </td>
                            <td>
                                <b>Id-Estudiante</b>
                            </td>
                            <td>
                                <b>Id-Curso</b>
                            </td>
                            <td>
                                <b>Sugerencia</b>
                            </td>
                            <td>
                                <b>Fecha de publicación</b>
                            </td>
                        </tr>
                        @foreach (var item in Sugerencias!)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.EstudianteId</td>
                                <td>@item.CursoId</td>
                                <td>@item.TextoSugerencia</td>
                                <td>@item.FechaCreacion</td>


                                <td>
                                    <a href="/sugerencias/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                    <button @onclick=@(() => DeleteAsync(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill" /> Borrar</button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

            </Body>
        </GenericList>
    </div>
</div>
@code {
    public List<Sugerencia> Sugerencias { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Sugerencia>>("api/sugerencias");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Sugerencias = responseHttp.Response;
    }

    private async Task DeleteAsync(Sugerencia Sugerencia)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar la sugerencia: {Sugerencia.Id}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Sugerencia>($"api/sugerencias/{Sugerencia.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("sugerencias");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await SweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000

            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con exito");
    }

}


